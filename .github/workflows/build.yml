name: Publish

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
  
jobs: 
  build-win:
    runs-on: windows-latest
    if: ${{ !contains(github.event.head_commit.message, 'no-win') && !contains(github.event.head_commit.message, 'no-run') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: code

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7'

      - name: Publish Windows
        run: dotnet publish -r win-x64 -c Release --self-contained --framework net7.0 -o "${{ github.workspace }}/win"
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.UI

      - name: Build Publisher
        run: dotnet build -o "${{ github.workspace }}/publisher"
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.Publish

      - name: Upload
        run: |
          dotnet Updator.Downloader.Publish.dll --legacy true --config ${{ secrets.PUBLISHER_CONFIG }} --os win --path "${{ github.workspace }}/win/Updator.Downloader.UI.exe"
        working-directory: ${{ github.workspace }}/publisher 

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: win
          path: "${{ github.workspace }}/win/Updator.Downloader.UI.exe"
          
          
  build-linux:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'no-linux') && !contains(github.event.head_commit.message, 'no-run') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: code

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7' 

      - name: Publish Linux
        run: dotnet publish -r linux-x64 -c Release --self-contained --framework net7.0 -o "${{ github.workspace }}/linux"
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.UI

      - name: Build Publisher
        run: dotnet build -o "${{ github.workspace }}/publisher"
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.Publish

      - name: Upload
        run: | 
          dotnet Updator.Downloader.Publish.dll --config ${{ secrets.PUBLISHER_CONFIG }} --os linux --path "${{ github.workspace }}/linux/Updator.Downloader.UI"
        working-directory: ${{ github.workspace }}/publisher 

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: "${{ github.workspace }}/linux/Updator.Downloader.UI"
          

  build-osx:
    runs-on: macos-latest
    if: ${{ !contains(github.event.head_commit.message, 'no-osx') && !contains(github.event.head_commit.message, 'no-run') }}
    env:
      APP_PACKAGE_ZIP: build.zip
      APP_PACKAGE_NAME: build.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: code
          
      - name: Setup .NET  
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7' 
      
      - name: Prepare Package
        working-directory: ${{ github.workspace }} 
        run: |
          rm -rf "${{ env.APP_PACKAGE_NAME }}"
          mkdir "${{ env.APP_PACKAGE_NAME }}"
          mkdir "${{ env.APP_PACKAGE_NAME }}/Contents"
          mkdir "${{ env.APP_PACKAGE_NAME }}/Contents/MacOS" 
          
      - name: Publish Mac
        run: dotnet publish -r osx-x64 -c Release --self-contained --framework net7.0 -o "${{ github.workspace }}/${{ env.APP_PACKAGE_NAME }}/Contents/MacOS" 
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.UI

      - name: Post Process Package
        working-directory: ${{ github.workspace }}
        env:
          ICONS_FILE: ${{ github.workspace }}/code/Updator.Downloader.UI/MacOS/Icon.icns
          PLIST_FILE: ${{ github.workspace }}/code/Updator.Downloader.UI/MacOS/Info.plist
        run: |
          mkdir "${{ env.APP_PACKAGE_NAME }}/Contents/Resources"
          
          cp "${{ env.PLIST_FILE }}" "${{ env.APP_PACKAGE_NAME }}/Contents/Info.plist"
          cp "${{ env.ICONS_FILE }}" "${{ env.APP_PACKAGE_NAME }}/Contents/Resources/Icon.icns"
          
      - name: Setup Keychain
        run: |
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          echo "${{ secrets.DEVELOPER_ID_CERTIFICATE }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "${{ secrets.APPLE_ID }}" --team-id ${{ secrets.TEAM_ID }} --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"
        
      - name: Codesign App
        working-directory: ${{ github.workspace }}
        env:
          ENTITLEMENTS_FILE: ${{ github.workspace }}/code/Updator.Downloader.UI/MacOS/App.entitlements
        run: |
            find "${{ env.APP_PACKAGE_NAME }}/Contents/MacOS/"|while read fname; do
              if [ -f "$fname" ]
              then
                  echo "[INFO] Signing $fname"
                  codesign --force --timestamp --options=runtime --entitlements "${{ env.ENTITLEMENTS_FILE }}" --sign "${{ secrets.DEVELOPER_ID_CERTIFICATE_THUMBNAIL }}" "$fname"
              fi
            done
            codesign --force --timestamp --options=runtime --entitlements "${{ env.ENTITLEMENTS_FILE }}" --sign "${{ secrets.DEVELOPER_ID_CERTIFICATE_THUMBNAIL }}" "${{ env.APP_PACKAGE_NAME }}"    
          
      - name: Notarise App
        working-directory: ${{ github.workspace }}
        run: |
            ditto -c -k --sequesterRsrc --keepParent "${{ env.APP_PACKAGE_NAME }}" "${{ env.APP_PACKAGE_ZIP }}"
            xcrun notarytool submit "${{ env.APP_PACKAGE_ZIP }}" --wait --keychain-profile "AC_PASSWORD"
            xcrun stapler staple "${{ env.APP_PACKAGE_NAME }}"

      - name: Build Publisher
        run: dotnet build -o "${{ github.workspace }}/publisher"
        working-directory: ${{ github.workspace }}/code/Updator.Downloader.Publish
        
      - name: Upload
        run: |
          dotnet Updator.Downloader.Publish.dll --config ${{ secrets.PUBLISHER_CONFIG }} --os osx --path "${{ github.workspace }}/${{ env.APP_PACKAGE_ZIP }}"
        working-directory: ${{ github.workspace }}/publisher 
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: osx
          path: "${{ github.workspace }}/${{ env.APP_PACKAGE_ZIP }}"
          
      - name: Restore
        if: always()
        run: |
          security default-keychain -s login.keychain 
          security delete-keychain build.keychain
          
  build-birth:
    needs: [ build-win, build-osx, build-linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: code

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7' 

      - name: Build Birth
        run: dotnet build -o "${{ github.workspace }}/birth"
        working-directory: ${{ github.workspace }}/code/Updator.Birth

      - name: Upload
        run: |
          dotnet Updator.Birth.dll --cos ${{ secrets.COS_CONFIG }} --path "${{ github.workspace }}/code/Updator.Birth/birth"
        working-directory: ${{ github.workspace }}/birth 